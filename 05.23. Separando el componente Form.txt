----------------------------------------------------------------------------------------
InvoiceApp.jsx
----------------------------------------------------------------------------------------
import { useEffect, useState } from "react";
import { getInvoice, calculateTotal } from "./services/getInvoice"
import { ClientView } from "./components/ClientView";
import { CompanyView } from "./components/CompanyView";
import { InvoiceView } from "./components/InvoiceView";
import { ListItemsView } from "./components/ListItemsView";
import { TotalView } from "./components/TotalView";
import { FormItemsView } from "./components/FormItemsView";

// Constante para definir el estado inicial de la factura
const invoiceInitial = {
    id: 0,
    name: '',
    client: {
        name: '',
        lastname: '',
        address: {
            country: '',
            city: '',
            street: '',
            number: 0,
        }
    },
    company: {
        name: '',
        fiscalNumber: 0
    },
    items: []
}

// Función principal del componente
export const InvoiceApp = () => {

    // Definir el estado para el contador de ID
    const [counter, setCounter] = useState(4);

    // Definir el estado inicial de la factura
    const [invoice, setInvoice] = useState(invoiceInitial);

    // Definir el estado para los items de la factura
    const [items, setItems] = useState([]);

    // Definir el estado para el total de los items
    const [total, setTotal] = useState(0);

    // Desestructurar el objeto invoice recibido
    const { id, name, client, company } = invoice;

    // Definir el efecto secundario para obtener los datos de la factura luego de renderizar el componente
    useEffect(() => {
        const data = getInvoice();
        setInvoice(data);
        setItems(data.items);
    }, []);

    // Definir el efecto secundario que dependa del arreglo items
    useEffect(() => {
        // Recalcular el total
        setTotal(calculateTotal(items));
    }, [items]);

    // Definir una función para agregar un nuevo item
    const handlerAddItems = ({ product, price, quantity }) => {

        // Actualizar el arreglo de items
        setItems([...items, {
            id: counter,
            product: product.trim(),
            price: +price.trim(),
            quantity: parseInt(quantity.trim(), 10),
        }])

        setCounter(counter + 1);

    }

    return (
        <>
            <div className="container">
                <div className="card my-3">
                    <div className="card-header">
                        Ejemplo Factura
                    </div>
                    <div className="card-body">
                        <InvoiceView id={id} name={name} />

                        <div className="row my-3">
                            <div className="col">
                                <ClientView title="Datos del cliente" client={client} />
                            </div>

                            <div className="col">
                                <CompanyView title="Datos de la empresa" company={company} />
                            </div>
                        </div>
                        <ListItemsView title="Productos de la factura" items={items} />

                        <TotalView total={total} />

                        <FormItemsView handler={handlerAddItems} />
                    </div>
                </div>
            </div>
        </>
    )
}



----------------------------------------------------------------------------------------
FormItemsView.jsx
----------------------------------------------------------------------------------------
import { useState } from "react";

export const FormItemsView = ({ handler }) => {

    // Definir el estado unificado para todos los campos del formulario
    const [formItemsState, setFormItemsState] = useState({
        product: '',
        price: '',
        quantity: ''
    });

    // Desestructurar el objeto formItemsState
    const { product, price, quantity } = formItemsState

    // Definir una función para manejar los cambios en cada campo del formulario
    const onInputChange = ({ target: { name, value } }) => {
        setFormItemsState({
            ...formItemsState,
            [name]: value,
        })
    }

    // Definir una función para manejar el envio del formulario
    const onInvoiceItemsSubmit = (event) => {

        // No recargar la pagina
        event.preventDefault();

        // Validaciones en los campos de texto
        if (product.trim().length <= 1) {
            alert('Error, el nombre del producto debe tener más de un caracter');
            return;
        }

        if (isNaN(price.trim())) {
            alert('Error, el precio no es un número');
            return;
        }
        if (price.trim().length <= 1) {
            alert('Error, el precio debe tener 2 digitos');
            return;
        }

        if (isNaN(quantity.trim())) {
            alert('Error, la cantidad no es un número');
            return;
        }
        if (quantity < 1) {
            alert('Error, la cantidad tiene que ser mayor a 0');
            return;
        }

        // Pasar los datos del formulario
        handler(formItemsState);

        // Limpiar los campos de texto
        setFormItemsState({
            product: '',
            price: '',
            quantity: '',
        })

    }

    return (<>
        <form
            onSubmit={onInvoiceItemsSubmit}
            className="w-50"
        >
            <input
                type="text"
                name="product"
                value={product}
                placeholder="Producto"
                className="form-control my-3"
                onChange={onInputChange} />
            <input
                type="text"
                name="price"
                value={price}
                placeholder="Precio"
                className="form-control my-3"
                onChange={onInputChange} />
            <input
                type="text"
                name="quantity"
                value={quantity}
                placeholder="Cantidad"
                className="form-control my-3"
                onChange={onInputChange} />
            <button type="submir" className="btn btn-primary my-3">Nuevo item</button>
        </form>
    </>)
}
